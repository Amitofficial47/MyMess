// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  displayId        String    @unique // Auto-generated user-friendly ID
  name             String
  email            String    @unique
  password         String
  enrollmentNumber String?   @unique
  course           String?
  role             UserRole  @default(STUDENT)
  status           VerificationStatus @default(PENDING)
  hostel           String
  avatar           String? // URL to user's avatar image
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  mealSelections    MealSelection[]
  addonConsumptions AddonConsumption[]
  feedback          Feedback[]
}

model MenuItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  dayOfWeek  DayOfWeek
  mealType   MealType
  item       String
  notes      String?
  available  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([dayOfWeek, mealType])
}

model MealSelection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      String // YYYY-MM-DD format
  mealType  MealType
  token     String   @unique
  consumed  Boolean  @default(false)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  addonConsumptions AddonConsumption[]

  @@unique([userId, date, mealType])
}

model Addon {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  price       Float
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  consumptions AddonConsumption[]
}

model AddonConsumption {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  addonId     String   @db.ObjectId
  addon       Addon    @relation(fields: [addonId], references: [id], onDelete: Cascade)
  mealSelectionId String @db.ObjectId
  mealSelection   MealSelection @relation(fields: [mealSelectionId], references: [id], onDelete: Cascade)
  quantity    Int
  priceAtConsumption Float
  consumed    Boolean @default(false)
  createdAt   DateTime @default(now())
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  createdAt DateTime @default(now())
}

model Bill {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName   String
  uploadDate DateTime @default(now())
  month      String
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject   String
  message   String
  createdAt DateTime @default(now())
}

enum UserRole {
  STUDENT
  ADMIN
  SUPERADMIN
  MESSADMIN
}

enum MealType {
  Breakfast
  Lunch
  Dinner
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}
