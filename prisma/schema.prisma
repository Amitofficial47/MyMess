
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  displayId            String    @unique
  name                 String
  email                String    @unique
  password             String
  enrollmentNumber     String?   @unique
  course               String?
  role                 UserRole  @default(STUDENT)
  status               VerificationStatus @default(PENDING)
  hostel               String
  avatar               String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  mealSelections       MealSelection[]
  feedback             Feedback[]

  passwordResetOtp         String?
  passwordResetOtpExpires  DateTime?
}

model MenuItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  dayOfWeek   DayOfWeek
  mealType    MealType
  item        String
  notes       String?
  available   Boolean
  
  @@unique([dayOfWeek, mealType])
}

model MealSelection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  date        String
  mealType    MealType
  token       String   @unique
  consumed    Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  createdAt DateTime @default(now())
}

model Bill {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName    String
  uploadDate  DateTime @default(now())
  month       String
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  subject   String
  message   String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  STUDENT
  ADMIN
  SUPERADMIN
  MESSADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum MealType {
  Breakfast
  Lunch
  Dinner
}
